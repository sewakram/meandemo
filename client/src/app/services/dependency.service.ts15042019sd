import { Injectable } from '@angular/core';
import { Http, Headers } from '@angular/http';
import { HttpModule } from '@angular/http';
import { NavbarserviceService } from './navbarservice.service';


@Injectable()
export class DependencyService {

  constructor(private http: Http, public navbarservice: NavbarserviceService) { }

  getcountry() {
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.get('http://localhost:3000/hierarchy/country', { headers: headers })
      .map(res => res.json());
  }

  getsinglecountry(cid) {
    console.log('service', cid);
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.get('http://localhost:3000/hierarchy/country/' + cid, { headers: headers })
      .map(res => res.json());
  }
  
  getsinglestate(cid) {
    console.log('service', cid);
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.get('http://localhost:3000/hierarchy/state/' + cid, { headers: headers })
      .map(res => res.json());
  }

  getsingleregion(rid) {
    console.log('servicegetsingleregion', rid);
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.get('http://localhost:3000/hierarchy/region/' + rid, { headers: headers })
      .map(res => res.json());
  }

  getsingleroute(roid) {
    console.log('servicegetsingleroute', roid);
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.get('http://localhost:3000/hierarchy/route/' + roid, { headers: headers })
      .map(res => res.json());
  }
  
  getsingleblock(bid) {
    console.log('servicegetsingleroute', bid);
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.get('http://localhost:3000/hierarchy/block/' + bid, { headers: headers })
      .map(res => res.json());
  }

  updatecountry(cid, data) {
    console.log('service', cid);
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.put('http://localhost:3000/hierarchy/country/' + cid, data, { headers: headers })
      .map(res => res.json());
  }

  deletecountry(cid) {
    console.log('service', cid);
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.delete('http://localhost:3000/hierarchy/country/'+ cid,{ headers: headers })
      .map(res => res.json());
  }

  updatestate(cid, data) {
    console.log('service', cid);
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.put('http://localhost:3000/hierarchy/state/' + cid, data, { headers: headers })
      .map(res => res.json());
  }

  getstate() {
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.get('http://localhost:3000/hierarchy/state', { headers: headers })
      .map(res => res.json());
  }

  deletestate(cid) {
  console.log('service', cid);
  let headers = new Headers();
  this.navbarservice.loadToken();
  headers.append('Authorization', this.navbarservice.authToken);
  headers.append('Content-Type', 'application/json');
  return this.http.delete('http://localhost:3000/hierarchy/state/'+ cid,{ headers: headers })
  .map(res => res.json());
  }

  getstatesbycid(cid) {
  console.log('service', cid);
  let headers = new Headers();
  this.navbarservice.loadToken();
  headers.append('Authorization', this.navbarservice.authToken);
  headers.append('Content-Type', 'application/json');
  return this.http.get('http://localhost:3000/hierarchy/statesbycountry/'+ cid,{ headers: headers })
  .map(res => res.json());
  }

  updateregion(rid, data) {
    console.log('service', rid);
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.put('http://localhost:3000/hierarchy/region/' + rid, data, { headers: headers })
      .map(res => res.json());
  }

  getregion() {
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.get('http://localhost:3000/hierarchy/region', { headers: headers })
      .map(res => res.json());
  }

  deleteregion(rid) {
    console.log('service', rid);
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.delete('http://localhost:3000/hierarchy/region/'+ rid,{ headers: headers })
    .map(res => res.json());
    }

  getregionsbysid(sid) {
  console.log('service', sid);
  let headers = new Headers();
  this.navbarservice.loadToken();
  headers.append('Authorization', this.navbarservice.authToken);
  headers.append('Content-Type', 'application/json');
  return this.http.get('http://localhost:3000/hierarchy/regionsbystate/'+ sid,{ headers: headers })
  .map(res => res.json());
  }

  updateroute(roid, data) {
    console.log('service', roid);
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.put('http://localhost:3000/hierarchy/route/' + roid, data, { headers: headers })
      .map(res => res.json());
  }

  getroute() {
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.get('http://localhost:3000/hierarchy/route', { headers: headers })
      .map(res => res.json());
  }

  deleteroute(roid) {
    console.log('service', roid);
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.delete('http://localhost:3000/hierarchy/route/'+ roid,{ headers: headers })
    .map(res => res.json());
    }

  getroutesbyrid(rid) {
  console.log('service', rid);
  let headers = new Headers();
  this.navbarservice.loadToken();
  headers.append('Authorization', this.navbarservice.authToken);
  headers.append('Content-Type', 'application/json');
  return this.http.get('http://localhost:3000/hierarchy/routesbyregion/'+ rid,{ headers: headers })
  .map(res => res.json());
  }

  getblock() {
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.get('http://localhost:3000/hierarchy/block', { headers: headers })
      .map(res => res.json());
  }
  
  updateblock(bid, data) {
    console.log('service', bid);
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.put('http://localhost:3000/hierarchy/block/' + bid, data, { headers: headers })
      .map(res => res.json());
  }

  deleteblock(bid) {
    console.log('service', bid);
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.delete('http://localhost:3000/hierarchy/block/'+ bid,{ headers: headers })
    .map(res => res.json());
  }

  getblocksbyroid(roid) {
  console.log('service', roid);
  let headers = new Headers();
  this.navbarservice.loadToken();
  headers.append('Authorization', this.navbarservice.authToken);
  headers.append('Content-Type', 'application/json');
  return this.http.get('http://localhost:3000/hierarchy/blocksbyroute/'+ roid,{ headers: headers })
  .map(res => res.json());
  }

  createcountry(data) {
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    return this.http.post('http://localhost:3000/hierarchy/country', data, { headers: headers })
      .map(res => res.json());
  }

  createstate(data) {
    // data['cid'].push(cid);
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    console.log('service', data);
    return this.http.post('http://localhost:3000/hierarchy/state', data, { headers: headers })
      .map(res => res.json());
  }

  createregion(data) {
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    console.log('region', data);
    return this.http.post('http://localhost:3000/hierarchy/region', data, { headers: headers })
      .map(res => res.json());
  }

  createroute(data) {
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    console.log('route', data);
    return this.http.post('http://localhost:3000/hierarchy/route', data, { headers: headers })
      .map(res => res.json());
  }

  createblock(data) {
    let headers = new Headers();
    this.navbarservice.loadToken();
    headers.append('Authorization', this.navbarservice.authToken);
    headers.append('Content-Type', 'application/json');
    console.log('block', data);
    return this.http.post('http://localhost:3000/hierarchy/block', data, { headers: headers })
      .map(res => res.json());
  }

}
